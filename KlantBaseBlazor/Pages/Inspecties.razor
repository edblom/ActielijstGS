@page "/inspecties"
@inject HttpClient Http
@using ActielijstApi.Data
@using ActielijstApi.Models
@using Radzen.Blazor
@using Radzen
@using System.Text.Json

<style>
    .radzen-header-cell {
        text-align: left;
        font-weight: bold;
        background-color: #f5f5f5;
    }
    .radzen-header-cell.toegewezen {
        text-align: center;
    }
    .radzen-cell {
        text-align: left;
    }
    .radzen-cell.toegewezen {
        text-align: center;
    }
</style>

<h3>Aankomende Inspecties voor Joris</h3>
<div style="margin-bottom: 10px;">
    <input type="text" @bind="filterText" @oninput="OnFilterChanged" placeholder="Zoek naar..." style="padding: 5px; margin-right: 10px;" />
    <button style="padding: 5px 10px; background-color: #007bff; color: white; border: none; cursor: pointer;" @onclick="ResetFilter">Alles tonen</button>
</div>

@if (inspecties != null)
{
    <RadzenDataGrid Data="@filteredInspecties" TItem="AankomendeInspectie" 
                    Style="width: 100%; border: 1px solid #ddd;"
                    AllowSorting="true" 
                    AllowFiltering="true" 
                    FilterMode="FilterMode.Advanced"
                    AllowPaging="true"
                    ShowPagingSummary="true"
                    PageSizeOptions="@(new int[]{5, 10, 20, 30})"
                    @ref="grid">
        <Columns>
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Project" Title="project" Width="200px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="ProjectNr" Title="Opdracht Nr" Width="100px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Adres" Title="adres" Width="250px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Applicateur" Title="applicateur" Width="150px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Soort" Title="soort" Width="100px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Omschrijving" Title="omschrijving" Width="200px" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Toegewezen" Title="Toegewezen" Width="80px" CssClass="toegewezen" FormatString="{0:✔;✘;N/A}" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="DatumGereed" Title="Datum Gereed" Width="120px" FormatString="yyyy-MM-dd" />
            <RadzenDataGridColumn TItem="AankomendeInspectie" Property="Status" Title="status" Width="100px" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>@statusMessage</p>
}

@code {
    private List<AankomendeInspectie>? inspecties;
    private List<AankomendeInspectie> filteredInspecties = [];
    private string statusMessage = "Laden...";
    private string filterText = "";
    private RadzenDataGrid<AankomendeInspectie>? grid;

    protected override async Task OnInitializedAsync()
    {
        await LoadInspections();
    }

    private async Task LoadInspections()
    {
        try
        {
            statusMessage = "Bezig met ophalen van inspecties voor JZA...";
            var httpResponse = await Http.GetAsync("api/upcominginspections?inspecteurId=JZA&includeMetadata=true");
            var json = await httpResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw JSON van API: {json}");

            if (httpResponse.IsSuccessStatusCode)
            {
                var response = JsonSerializer.Deserialize<InspectionResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (response == null || response.Data == null)
                {
                    statusMessage = "Deserialisatie mislukt: response is null.";
                }
                else
                {
                    inspecties = response.Data;
                    filteredInspecties = inspecties.ToList();
                    statusMessage = inspecties.Any() ? "Data geladen!" : "Geen inspecties gevonden voor JZA.";
                }
            }
            else
            {
                statusMessage = $"API fout: {httpResponse.StatusCode} - {json}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Fout: {ex.Message}";
            Console.WriteLine($"Fout details: {ex}");
        }
    }

    private async Task OnFilterChanged(ChangeEventArgs args)
    {
        filterText = args.Value?.ToString() ?? "";
        if (inspecties != null)
        {
            if (string.IsNullOrEmpty(filterText))
            {
                filteredInspecties = inspecties.ToList();
            }
            else
            {
                filteredInspecties = inspecties
                    .Where(i => i.Project.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                                i.Adres.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                                i.Omschrijving.Contains(filterText, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            StateHasChanged();
        }
    }

    private void ResetFilter()
    {
        filterText = "";
        filteredInspecties = inspecties?.ToList() ?? [];
        StateHasChanged();
    }

    public class InspectionResponse
    {
        public List<AankomendeInspectie>? Data { get; set; }
        public List<FieldDefinition>? Fields { get; set; }
    }

    public class FieldDefinition
    {
        public string? FieldName { get; set; }
        public int DisplayOrder { get; set; }
        public string? ColumnWidth { get; set; }
    }
}