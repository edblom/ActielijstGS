@using Radzen
@using Radzen.Blazor
@using KlantBaseWASM.Models
@inject DialogService DialogService
@inject HttpClient HttpClient


<RadzenFormField Text="Description">
    <RadzenTextArea @bind-Value="Action.FldOmschrijving" Cols="60" Rows="4" />
</RadzenFormField>
<RadzenFormField Text="Action Date">
    <RadzenDatePicker @bind-Value="Action.FldMActieDatum" DateFormat="dd-MM-yyyy" Style="width:70%" />
</RadzenFormField>
<RadzenFormField Text="Assigned To">
    <RadzenDropDown Data="@employees" TextProperty="Voornaam" ValueProperty="WerknId" @bind-Value="Action.FldMActieVoor" Style="width:100%" AllowClear="true" />
</RadzenFormField>
<RadzenFormField Text="Completed">
    <RadzenDatePicker @bind-Value="Action.FldMActieGereed" DateFormat="dd-MM-yyyy" Style="width:70%" AllowClear="true" />
</RadzenFormField>
<RadzenFormField Text="Action Type">
    <RadzenDropDown Data="@actionTypes" TextProperty="Omschrijving" ValueProperty="Id" @bind-Value="Action.FldMActieSoort" Style="width:100%" AllowClear="true" />
</RadzenFormField>
<RadzenFormField Text="Priority">
    <RadzenNumeric @bind-Value="Action.FldMPrioriteit" Style="width:100%" AllowClear="true" />
</RadzenFormField>
<div class="mt-3">
    <RadzenButton Text="Save" Click="@SaveAction" />
    <RadzenButton Text="Cancel" Click="@(() => DialogService.Close())" />
</div>

@code {
    [Parameter] public Actie Action { get; set; } = new();
    private List<ActieSoort> actionTypes = new();
    private List<Werknemer> employees = new();
    [Parameter] public Dictionary<int, string> ActieSoortLookup { get; set; }
    [Parameter] public List<Priority> Priorities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ActieSoortLookup != null)
            {
                actionTypes = ActieSoortLookup.Select(kvp => new ActieSoort { Id = kvp.Key, Omschrijving = kvp.Value }).ToList();
            }
            employees = await HttpClient.GetFromJsonAsync<List<Werknemer>>("api/Werknemers/actueel") ?? new List<Werknemer>();
        }
        catch (Exception ex)
        {
            DialogService.Alert("Error loading data: " + ex.Message);
        }
    }

    private async Task SaveAction()
    {
        try
        {
            var actionToSave = new Actie
            {
                FldMid = Action.FldMid,
                FldMDatum = Action.FldMDatum,
                WerknId = Action.WerknId,
                FldMKlantId = Action.FldMKlantId,
                FldMContactPers = Action.FldMContactPers,
                FldMProjectId = Action.FldMProjectId,
                FldOpdrachtId = Action.FldOpdrachtId,
                FldOmschrijving = Action.FldOmschrijving,
                FldMAfspraak = Action.FldMAfspraak,
                FldMActieDatum = Action.FldMActieDatum,
                FldMActieVoor = Action.FldMActieVoor,
                FldMActieVoor2 = Action.FldMActieVoor2,
                FldMActieGereed = Action.FldMActieGereed,
                FldMActieSoort = Action.FldMActieSoort, // String value
                FldMPrioriteit = Action.FldMPrioriteit
            };
            var response = await HttpClient.PutAsJsonAsync($"api/acties/{Action.FldMid}", actionToSave);
            response.EnsureSuccessStatusCode();
            DialogService.Close(true); // Sluit met succes
        }
        catch (Exception ex)
        {
            DialogService.Alert("Error saving action: " + ex.Message);
        }
    }
}