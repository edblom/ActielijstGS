@using Radzen
@using Radzen.Blazor
@using KlantBaseWASM.Models
@using KlantBaseWASM.Dtos
@using KlantBaseWASM.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject DetailsService DetailsService

<RadzenStack Orientation="Orientation.Horizontal" Gap="10px">
    <RadzenText>
        Actie @Action.FldMid: gemaakt @(Action.FldMDatum?.ToString("dd-MM-yyyy") ?? "N/A"): door @(Werknemers.FirstOrDefault(w => w.WerknId == Action.WerknId)?.Voornaam ?? "Onbekend")
    </RadzenText>
</RadzenStack>
<RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center">
    <RadzenFormField Text="Klant">
        <RadzenAutoComplete @bind-Value="searchKlantTerm"
                            LoadData="@LoadKlantData"
                            TextProperty="Zoekcode"
                            ValueProperty="Id"
                            Data="@klanten"
                            Style="width: 100%;"
                            Placeholder="Zoek klant (zoekcode, naam, plaats)..."
                            MinLength="1"
                            Delay="200">
            <Template Context="klant">
                @klant.Zoekcode - @klant.Naam (@klant.Plaats)
            </Template>
        </RadzenAutoComplete>
    </RadzenFormField>
    <RadzenText Text="@KlantDetails" />
</RadzenStack>
@* <RadzenFormField Text="Project">
        <RadzenAutoComplete @bind-Value="Action.FldMProjectId" LoadData="@LoadProjectData" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 100%;" Placeholder="Zoek project..." />
        <RadzenText Text="@ProjectDetails" />
    </RadzenFormField>

    <RadzenFormField Text="Contactpersoon">
        <RadzenAutoComplete @bind-Value="Action.FldMContactPers" LoadData="@LoadContactpersoonData" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 100%;" Placeholder="Zoek contactpersoon..." />
        <RadzenText Text="@ContactpersoonDetails" />
    </RadzenFormField>

    <RadzenFormField Text="Opdracht">
        <RadzenAutoComplete @bind-Value="Action.FldOpdrachtId" LoadData="@LoadOpdrachtData" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 100%;" Placeholder="Zoek opdracht..." />
        <RadzenText Text="@OpdrachtDetails" />
    </RadzenFormField> *@

<RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
    <RadzenFormField Text="Voor">
        <RadzenDropDown Data="@Werknemers" TextProperty="Voornaam" ValueProperty="WerknId" @bind-Value="Action.FldMActieVoor" Style="width:100%" AllowClear="true" />
    </RadzenFormField>
    <RadzenFormField Text="en/of">
        <RadzenDropDown Data="@Werknemers" TextProperty="Voornaam" ValueProperty="WerknId" @bind-Value="Action.FldMActieVoor2" Style="width:100%" AllowClear="true" />
    </RadzenFormField>
</RadzenStack>
<RadzenRow>
    <RadzenFormField Text="Omschrijving">
        <RadzenTextArea @bind-Value="Action.FldOmschrijving" Style="width:100%" cols="80" Rows="4" />
    </RadzenFormField>
</RadzenRow>
<RadzenRow>
    <RadzenFormField Text="Soort actie">
        <RadzenDropDown Data="@actionTypes" TextProperty="Omschrijving" ValueProperty="Id" @bind-Value="Action.FldMActieSoort" Style="width:100%" AllowClear="true" />
    </RadzenFormField>
</RadzenRow>
<RadzenFormField Text="Uitvoeren voor:">
    <RadzenDatePicker @bind-Value="Action.FldMActieDatum" DateFormat="dd-MM-yyyy" Style="width:70%" />
</RadzenFormField>
<RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.End">
        <RadzenText>Actie gereed:</RadzenText>
        <RadzenFormField>
            <RadzenCheckBox @bind-Value="IsCompleted" />
        </RadzenFormField>
        <RadzenText>
            @(Action.FldMActieGereed?.ToString("ddd dd-MM-yyyy") ?? "N/A")
        </RadzenText>
    </RadzenStack>
</RadzenRow>
<RadzenFormField Text="Priority">
    <RadzenNumeric @bind-Value="Action.FldMPrioriteit" Style="width:100%" AllowClear="true" />
</RadzenFormField>
<div class="mt-3">
    <RadzenButton Text="Save" Click="@SaveAction" />
    <RadzenButton Text="Cancel" Click="@(() => DialogService.Close())" />
</div>

@code {
    [Parameter] public Actie Action { get; set; } = new();
    private List<ActieSoort> actionTypes = new();
    [Parameter] public List<Werknemer> Werknemers { get; set; }
    [Parameter] public Dictionary<int, string> ActieSoortLookup { get; set; }
    [Parameter] public List<Priority> Priorities { get; set; }
    private string KlantDetails { get; set; }
    private string ProjectDetails { get; set; }
    private string ContactpersoonDetails { get; set; }
    private string OpdrachtDetails { get; set; }

    private string searchKlantTerm { get; set; } = string.Empty;  // Bestaande variabele
    private List<string> testItems = new List<string> { "Apple", "Banana", "Cherry" };  // Statische testlijst
    private List<string> filteredItems { get; set; } = new List<string>();  // Gefilterde lijst

    private List<KlantSearchDTO> klanten { get; set; } = new List<KlantSearchDTO>();  // Lokale lijst voor suggesties (initieel leeg)
    private KlantDTO KlantCurrent = new KlantDTO();  // Huidige klant details

    private async Task LoadKlantData(LoadDataArgs args)
    {
        var term = args.Filter ?? searchKlantTerm;
        Console.WriteLine($"Zoeken naar klanten met term: {term}");  // Log voor debug
        var results = await DetailsService.SearchKlantAsync(term);
        Console.WriteLine($"Resultaten gevonden: {results.Count}");  // Log aantal resultaten
        klanten = results;  // Update lijst
    }

    private async Task OnKlantChanged(string value)
    {
        searchKlantTerm = value;
        if (int.TryParse(value, out int klantId))
        {
            Action.FldMKlantId = klantId;
            KlantDetails = "Laden..."; // Tijdelijke placeholder
            KlantCurrent = await DetailsService.GetKlantDetailsAsync(klantId); // Async call
        }
        else
        {
            Action.FldMKlantId = null;
            KlantDetails = "Onbekend";
        }
    }

    private bool? IsCompleted
    {
        get => Action.FldMActieGereed.HasValue;
        set
        {
            if (value == true && !Action.FldMActieGereed.HasValue)
            {
                Action.FldMActieGereed = DateTime.Now;
            }
            else if (value == false && Action.FldMActieGereed.HasValue)
            {
                Action.FldMActieGereed = null;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ActieSoortLookup != null)
            {
                actionTypes = ActieSoortLookup.Select(kvp => new ActieSoort { Id = kvp.Key, Omschrijving = kvp.Value }).ToList();
            }
            if (Action.FldMKlantId.HasValue)
            {
                var KlantCurrent = await DetailsService.GetKlantDetailsAsync(Action.FldMKlantId);   // Nieuwe methode nodig
                searchKlantTerm = KlantCurrent?.Zoekcode ?? string.Empty;  // Stel huidige Zoekcode in
                KlantDetails = $"{KlantCurrent?.Naam} ({KlantCurrent?.Plaats})";  // Toon details
            }
            Console.WriteLine($"Huidige klant ingesteld: {searchKlantTerm}");
            // KlantDetails = await DetailsService.GetKlantDetailsAsync(Action.FldMKlantId);
            ProjectDetails = await DetailsService.GetProjectDetailsAsync(Action.FldMProjectId);
            ContactpersoonDetails = await DetailsService.GetContactpersoonDetailsAsync(Action.FldMContactPers); // string parameter
            OpdrachtDetails = await DetailsService.GetOpdrachtDetailsAsync(Action.FldOpdrachtId);
        }
        catch (Exception ex)
        {
            DialogService.Alert("Error loading data: " + ex.Message);
        }
    }

    private async Task SaveAction()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ActielijstAPI");
            var actionToSave = new Actie
            {
                FldMid = Action.FldMid,
                FldMDatum = Action.FldMDatum,
                WerknId = Action.WerknId,
                FldMKlantId = Action.FldMKlantId,
                FldMContactPers = Action.FldMContactPers,
                FldMProjectId = Action.FldMProjectId,
                FldOpdrachtId = Action.FldOpdrachtId,
                FldOmschrijving = Action.FldOmschrijving,
                FldMAfspraak = Action.FldMAfspraak,
                FldMActieDatum = Action.FldMActieDatum,
                FldMActieVoor = Action.FldMActieVoor,
                FldMActieVoor2 = Action.FldMActieVoor2,
                FldMActieGereed = Action.FldMActieGereed,
                FldMActieSoort = Action.FldMActieSoort,
                FldMPrioriteit = Action.FldMPrioriteit
            };
            var response = await httpClient.PutAsJsonAsync($"api/acties/{Action.FldMid}", actionToSave);
            response.EnsureSuccessStatusCode();
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            DialogService.Alert("Error saving action: " + ex.Message);
        }
    }

}