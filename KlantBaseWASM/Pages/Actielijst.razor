@page "/actielijst"
@using Radzen
@using Radzen.Blazor
@using KlantBaseWASM.Models
@using KlantBaseWASM.Services
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject ActieService ActieService
@inject WerknemerService WerknemerService

<h3>Actielijst</h3>

<!-- Werknemer en Status Filters -->
<div style="display: flex; align-items: center; margin-bottom: 10px; gap: 20px;">
    <div style="display: flex; align-items: center;">
        <label for="werknemerDropdown" style="margin-right: 10px;">Voor:</label>
        <RadzenDropDown id="werknemerDropdown" @bind-Value="SelectedWerknemerId" Data="@Werknemers"
                        TextProperty="DisplayName" ValueProperty="WerknId"
                        Change="@(args => FilterGrid())" Placeholder="Selecteer een werknemer" Style="width: 150px;" />
    </div>
    <div style="display: flex; align-items: center;">
        <label for="statusDropdown" style="margin-right: 10px;">Status:</label>
        <RadzenDropDown id="statusDropdown" @bind-Value="SelectedStatus" Data="@Statuses"
                        TextProperty="Text" ValueProperty="Value"
                        Change="@(args => FilterGrid())" Placeholder="Selecteer een status" Style="width: 150px;" />
    </div>
</div>

<RadzenDataGrid Data="@FilteredActions" TItem="Actie" AllowFiltering="true" AllowSorting="true" AllowPaging="true" PageSize="10"
                RowDoubleClick="@((args) => EditAction(args))">
    <Columns>
        <RadzenDataGridColumn Property="FldMid" Title="ID" Width="50px" />
        <RadzenDataGridColumn Property="FldOmschrijving" Title="Beschrijving" Width="200px" />
        <RadzenDataGridColumn Property="FldMActieDatum" Title="Actiedatum" Width="80px" FormatString="{0:dd-MM-yyyy}" />
        <RadzenDataGridColumn Property="FldMActieSoort" Title="Soort" Width="100px" />
        <RadzenDataGridColumn Property="FldMActieVoorInitialen" Title="voor" Width="50px" />
        <RadzenDataGridColumn Property="FldMActieVoor2Initialen" Title="en" Width="50px" />
        <RadzenDataGridColumn Property="FldMActieGereed" Title="Gereed" Width="80px" FormatString="{0:dd-MM-yyyy}" />
        <RadzenDataGridColumn Title="Links" Width="200px">
            <Template Context="actie">
                <NavLink href="@($"project/{actie.FldMProjectId}")">Project</NavLink> |
                <NavLink href="@($"klant/{actie.FldMKlantId}")">Klant</NavLink> |
                <NavLink href="@($"contactpersoon/{actie.FldMContactPers}")">Contact</NavLink> |
                <NavLink href="@($"opdracht/{actie.FldOpdrachtId}")">Opdracht</NavLink>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<Actie> actions = new();
    private List<Actie> FilteredActions = new();
    private List<Werknemer> Werknemers = new();
    private int? SelectedWerknemerId;
    private string SelectedStatus; // Nieuwe property voor statusfilter

    // Definieer statusopties
    private List<StatusOption> Statuses = new List<StatusOption>
    {
        new StatusOption { Value = null, Text = "Alles" },
        new StatusOption { Value = "Gereed", Text = "Gereed" },
        new StatusOption { Value = "Openstaand", Text = "Openstaand" }
    };

    // Klasse voor statusopties
    private class StatusOption
    {
        public string? Value { get; set; }
        public string Text { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Werknemers = await WerknemerService.GetWerknemersAsync(); // Haal alle werknemers op
            Werknemers.Insert(0, new Werknemer { WerknId = null, Voornaam = "Alles", Initialen = "" });
            await ActieService.InitializeAsync();
            actions = await ActieService.GetActionsAsync();
            FilteredActions = actions; // Initialiseer gefilterde lijst met alle acties
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading actions: {ex}");
            await DialogService.Alert("Error loading actions: " + ex.Message);
        }
    }

    private void FilterGrid()
    {
        var query = actions.AsQueryable();

        // Filter op werknemer
        if (SelectedWerknemerId.HasValue)
        {
            query = query.Where(a => a.FldMActieVoor == SelectedWerknemerId || a.FldMActieVoor2 == SelectedWerknemerId);
        }

        // Filter op status
        if (!string.IsNullOrEmpty(SelectedStatus))
        {
            if (SelectedStatus == "Gereed")
            {
                query = query.Where(a => a.FldMActieGereed.HasValue);
            }
            else if (SelectedStatus == "Openstaand")
            {
                query = query.Where(a => !a.FldMActieGereed.HasValue);
            }
            // "Alles" (null) laat de query ongewijzigd
        }

        FilteredActions = query.ToList();
        StateHasChanged(); // Forceer hertekening van de grid
    }

    private async Task EditAction(DataGridRowMouseEventArgs<Actie> args)
    {
        var result = await DialogService.OpenAsync<EditActionDialog>("Edit Action",
            new Dictionary<string, object> { { "Action", args.Data } });
        if (result != null)
        {
            await ActieService.InitializeAsync();
            actions = await ActieService.GetActionsAsync();
            FilterGrid(); // Herfilter na update
        }
    }
}