@page "/actielijst"
@using Radzen
@using Radzen.Blazor
@using KlantBaseWASM.Models
@using KlantBaseWASM.Services
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject ActieService ActieService
@inject WerknemerService WerknemerService
@inject ActieSoortService ActieSoortService
@inject PriorityService PriorityService

<h3>Actielijst</h3>
<RadzenButton Text="Test JS Interop" Click="@TestJsInterop" Style="margin-top: 10px;" />
<RadzenButton Text="Test Simple Dialog" Click="@TestSimpleDialog" Style="margin-top: 10px;" />
<RadzenButton Text="Test Empty Dialog" Click="@(() => TestEmptyDialog())" Style="margin-top: 10px;" />
<RadzenButton Text="Test Minimal Dialog" Click="@TestMinimalDialog" Style="margin-top: 10px;" />
<!-- Werknemer, Status, ActieSoort en Prioriteit Filters -->
<div style="display: flex; align-items: center; margin-bottom: 10px; gap: 20px;">
    <div style="display: flex; align-items: center;">
        <label for="statusDropdown" style="margin-right: 10px;">Status:</label>
        <RadzenDropDown id="statusDropdown" @bind-Value="SelectedStatus" Data="@Statuses"
                        TextProperty="Text" ValueProperty="Value"
                        Change="@((args) => FilterGrid())" Placeholder="Selecteer een status" Style="width: 100px;" />
    </div>
    <div style="display: flex; align-items: center;">
        <label for="werknemerDropdown" style="margin-right: 10px;">Voor:</label>
        <RadzenDropDown id="werknemerDropdown" @bind-Value="SelectedWerknemerId" Data="@Werknemers"
                        TextProperty="DisplayName" ValueProperty="WerknId"
                        Change="@((args) => FilterGrid())" Placeholder="Selecteer een werknemer" Style="width: 100px;" />
    </div>

    <div style="display: flex; align-items: center;">
        <label for="actiesoortDropdown" style="margin-right: 10px;">Soort actie:</label>
        <RadzenDropDown id="actiesoortDropdown" @bind-Value="SelectedActieSoortId" Data="@ActieSoorten"
                        TextProperty="Omschrijving" ValueProperty="Id"
                        Change="@((args) => FilterGrid())" Placeholder="Selecteer een actie soort" Style="width: 250px;" />
    </div>
    <div style="display: flex; align-items: center;">
        <label for="priorityDropdown" style="margin-right: 10px;">met prioriteit:</label>
        <RadzenDropDown id="priorityDropdown" @bind-Value="SelectedPriorityId" Data="@Priorities"
                        TextProperty="Omschrijving" ValueProperty="Prioriteit"
                        Change="@((args) => FilterGrid())" Placeholder="Selecteer een prioriteit" Style="width: 100px;" />
    </div>
</div>
<RadzenCard Variant="Variant.Outlined">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1.5rem;" Wrap="FlexWrap.Wrap">
        <RadzenButton Click="@ClearSelection" Text="Clear Selection" />
        @if (selectedActie?.Any() == true)
        {
            <div>
                Selected Actie: @selectedActie[0].FldOmschrijving @selectedActie[0].FldMid
            </div>
        }
    </RadzenStack>
</RadzenCard>

<RadzenDataGrid @ref="dataGrid" Data="@FilteredActions" TItem="Actie" AllowFiltering="true" AllowSorting="true" AllowPaging="true" PageSize="10" 
                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedActie
                RowDoubleClick="@((args) => EditAction(args))">
    <Columns>
        @* <RadzenDataGridColumn Property="FldMid" Title="ID" Width="80px" /> *@
        <RadzenDataGridColumn Property="FldMActieSoort" Title="Soort" Width="150px">
            <Template Context="actie">
                @if (actie.FldMActieSoort.HasValue && ActieSoortLookup.TryGetValue(actie.FldMActieSoort.Value, out var omschrijving))
                {
                    @omschrijving
                }
                else
                {
                    <span></span>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="FldOmschrijving" Title="Omschrijving" Width="300px" />
        <RadzenDataGridColumn Property="FldMActieVoorInitialen" Title="Voor" Width="50px" />
        <RadzenDataGridColumn Property="FldMActieVoor2Initialen" Title="Voor2" Width="50px" />
        <RadzenDataGridColumn Property="FldMActieDatum" Title="Actie voor" Width="100px" FormatString="{0:dd-MM-yyyy}" />
        <RadzenDataGridColumn Property="FldMPrioriteit" Title="Prioriteit" Width="80px">
            <Template Context="actie">
                @if (actie.FldMPrioriteit.HasValue && Priorities.Any(p => p.Prioriteit == actie.FldMPrioriteit.Value))
                {
                    var priority = Priorities.First(p => p.Prioriteit == actie.FldMPrioriteit.Value);
                    <span style="background-color: @priority.Kleur; padding: 2px 5px; border-radius: 3px;">@priority.Omschrijving</span>
                }
                else
                {
                    <span></span>
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="FldMActieGereed" Title="Gereed" Width="50px" >
            <Template Context="actie">
                <RadzenCheckBox Value="@(actie.FldMActieGereed.HasValue)" Disabled="true" />
            </Template>
        </RadzenDataGridColumn>

        @* <RadzenDataGridColumn Title="Links" Width="200px">
            <Template Context="actie">
                <NavLink href="@($"project/{actie.FldMProjectId}")">Project</NavLink> |
                <NavLink href="@($"klant/{actie.FldMKlantId}")">Klant</NavLink> |
                <NavLink href="@($"contactpersoon/{actie.FldMContactPers}")">Contact</NavLink> |
                <NavLink href="@($"opdracht/{actie.FldOpdrachtId}")">Opdracht</NavLink>
            </Template>
        </RadzenDataGridColumn> *@
    </Columns>
</RadzenDataGrid>

@code {
    private List<Actie> actions = new();
    private List<Actie> FilteredActions = new();
    private List<Werknemer> Werknemers = new();
    private int? SelectedWerknemerId = null; // Standaard "Alles"
    private string? SelectedStatus = "Openstaand"; // Initiële waarde "Openstaand"
    private int? SelectedActieSoortId = null; // Standaard "Alle soorten"
    private int? SelectedPriorityId; // Standaard "Alle prioriteiten", wordt later ingesteld op "Hoog"
    private List<ActieSoort> ActieSoorten = new();
    private Dictionary<int, string> ActieSoortLookup = new();
    private List<Priority> Priorities = new();
    private RadzenDataGrid<Actie> dataGrid; // Referentie naar de grid
    private IList<Actie> selectedActie;

    private List<StatusOption> Statuses = new List<StatusOption>
    {
        new StatusOption { Value = null, Text = "Alles" },
        new StatusOption { Value = "Gereed", Text = "Gereed" },
        new StatusOption { Value = "Openstaand", Text = "Openstaand" }
    };

    private class StatusOption
    {
        public string? Value { get; set; }
        public string Text { get; set; }
    }

    void ClearSelection()
    {
        selectedActie = null;
    }

    private void CheckDialogService()
    {
        Console.WriteLine("Checking DialogService injection...");
        if (DialogService == null)
        {
            Console.WriteLine("DialogService is null, injection failed.");
        }
        else
        {
            Console.WriteLine("DialogService is injected, type: " + DialogService.GetType().FullName);
        }
    }

    protected override void OnInitialized()
    {
        CheckDialogService();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Werknemers = (await WerknemerService.GetWerknemersAsync()).OrderBy(w => w.Initialen).ToList();
            Werknemers.Insert(0, new Werknemer { WerknId = null, Voornaam = "Alles", Initialen = "" });
            ActieSoorten = (await ActieSoortService.GetAllActiesoortenAsync()).OrderBy(a => a.Omschrijving).ToList();
            ActieSoorten.Insert(0, new ActieSoort { Id = null, Omschrijving = "Alles" });
            Statuses = Statuses.OrderBy(s => s.Text).ToList();
            Priorities = (await PriorityService.GetAllPrioritiesAsync()).OrderBy(p => p.Omschrijving).ToList();
            Priorities.Insert(0, new Priority { Id = null, Omschrijving = "Alle prioriteiten", Prioriteit = null });
            var highPriority = Priorities.FirstOrDefault(p => p.Omschrijving == "Hoog");
            SelectedPriorityId = highPriority?.Id;
            ActieSoortLookup = ActieSoorten.ToDictionary(a => a.Id ?? 0, a => a.Omschrijving);
            await ActieService.InitializeAsync();
            actions = (await ActieService.GetActionsAsync()).OrderBy(a => a.FldMActieDatum).ToList();
            FilteredActions = actions;
            selectedActie = actions.Take(1).ToList(); // Standaard eerste actie selecteren
            FilterGrid();
            Console.WriteLine("DialogService available post-init: " + (DialogService != null ? "Yes" : "No"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading actions: {ex}");
            await DialogService.Alert("Error loading actions: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DialogService != null)
        {
            Console.WriteLine("Post-render DialogService test, thread ID: " + Environment.CurrentManagedThreadId);
            var result = await DialogService.OpenAsync<MinimalDialog>("Post-Render Test", new Dictionary<string, object>(),
                new DialogOptions { Width = "300px", Height = "auto" });
            Console.WriteLine("Post-render Dialog closed with result: " + result);
        }
    }

    private void FilterGrid()
    {
        var query = actions.AsQueryable();

        if (SelectedWerknemerId.HasValue)
        {
            query = query.Where(a => a.FldMActieVoor == SelectedWerknemerId || a.FldMActieVoor2 == SelectedWerknemerId);
        }

        if (SelectedStatus != null)
        {
            if (SelectedStatus == "Gereed")
            {
                query = query.Where(a => a.FldMActieGereed.HasValue);
            }
            else if (SelectedStatus == "Openstaand")
            {
                query = query.Where(a => !a.FldMActieGereed.HasValue);
            }
        }

        if (SelectedActieSoortId.HasValue)
        {
            query = query.Where(a => a.FldMActieSoort == SelectedActieSoortId);
        }

        if (SelectedPriorityId.HasValue)
        {
            query = query.Where(a => a.FldMPrioriteit == SelectedPriorityId);
        }

        FilteredActions = query.ToList();
        StateHasChanged();
    }

    private async Task TestMinimalDialog()
    {
        Console.WriteLine("Testing minimal DialogService...");
        var result = await DialogService.OpenAsync<MinimalDialog>("Test Minimal", new Dictionary<string, object>(),
            new DialogOptions { Width = "300px", Height = "auto" });
        Console.WriteLine("Minimal Dialog closed with result: " + result);
    }
    private async Task EditAction(DataGridRowMouseEventArgs<Actie> args)
    {
        Console.WriteLine("EditAction triggered for action: " + args.Data?.FldOmschrijving);
        if (args.Data != null)
        {
            Console.WriteLine("Opening dialog with Action: " + args.Data.FldMid);
            var parameters = new Dictionary<string, object>
        {
            { "Action", args.Data },
            { "ActieSoortLookup", ActieSoortLookup },
            { "Priorities", Priorities }
        };
            try
            {
                var result = await DialogService.OpenAsync<EditActionDialog>("Edit Action", parameters,
                    new DialogOptions { Width = "500px", Height = "auto" });
                Console.WriteLine("Dialog closed with result: " + result);
                if (result != null)
                {
                    await ActieService.InitializeAsync();
                    actions = await ActieService.GetActionsAsync();
                    FilterGrid();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Dialog error: " + ex.Message);
            }
        }
        else
        {
            Console.WriteLine("No action data available in EditAction.");
        }
    }
    private async Task TestEmptyDialog()
    {
        Console.WriteLine("Testing empty DialogService, DialogService is " + (DialogService != null ? "not null" : "null"));
        if (DialogService != null)
        {
            Console.WriteLine("Attempting to open EmptyDialog, thread ID: " + Environment.CurrentManagedThreadId);
            var result = await DialogService.OpenAsync<EmptyDialog>("Test Empty", new Dictionary<string, object>(),
                new DialogOptions { Width = "200px", Height = "auto" });
            Console.WriteLine("Empty Dialog closed with result: " + result);
        }
        else
        {
            Console.WriteLine("DialogService is null, cannot open dialog.");
        }
    }
    private async Task TestSimpleDialog()
    {
        Console.WriteLine("Testing simple DialogService...");
        await DialogService.Alert("This is a simple alert dialog.", "Test Alert");
        Console.WriteLine("Simple Dialog closed.");
    }
    private async Task TestJsInterop()
    {
        Console.WriteLine("Testing JS interop...");
        var result = await JSRuntime.InvokeAsync<string>("alert", "JS Interop Test");
        Console.WriteLine("JS interop result: " + result);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}